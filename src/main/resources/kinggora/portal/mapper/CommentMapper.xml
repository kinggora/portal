<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kinggora.portal.mapper.CommentMapper">
    <resultMap id="Comment" type="Comment">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="content" column="content"/>
        <result property="ref" column="ref"/>
        <result property="refOrder" column="ref_order"/>
        <result property="parent" column="parent"/>
        <result property="depth" column="depth"/>
        <result property="regDate" column="reg_date"/>
        <result property="modDate" column="mod_date"/>
        <result property="deleted" column="del_flag"/>
        <association property="member" javaType="Member" columnPrefix="m_">
            <id property="id" column="id"/>
            <result property="username" column="username"/>
            <result property="password" column="password"/>
            <result property="name" column="name"/>
            <result property="role" column="role"
                    typeHandler="kinggora.portal.domain.typehandler.MemberRoleTypeHandler"/>
        </association>
    </resultMap>

    <insert id="saveComment" parameterType="Comment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comment(
        post_id
        , member_id
        , content
        , reg_date
        , parent
        , depth
        , ref
        , ref_order
        , del_flag
        ) VALUES (
        #{postId}
        , #{member.id}
        , #{content}
        , #{regDate}
        , #{parent}
        , #{depth}
        , #{ref}
        , #{refOrder}
        , #{deleted}
        )
    </insert>

    <select id="findMaxRef" resultType="int">
        SELECT IFNULL(MAX(ref), 0) FROM comment
    </select>

    <update id="updateRefOrder" parameterType="map">
        UPDATE comment
        SET ref_order = ref_order + 1
        WHERE ref=#{ref} AND (ref_order > #{refOrder} OR ref_order = #{refOrder})
    </update>

    <select id="findCommentById" parameterType="int" resultMap="Comment">
        SELECT
        c.id
        , c.post_id
        , c.content
        , c.reg_date
        , c.parent
        , c.depth
        , c.ref
        , c.ref_order
        , c.del_flag
        , m.id AS m_id
        , m.username AS m_username
        , m.name AS m_name
        , m.role AS m_role
        FROM comment c JOIN member m
        WHERE c.id=#{id} AND c.member_id=m.id
    </select>

    <select id="findComments" parameterType="map" resultMap="Comment">
        SELECT
        c.id
        , c.post_id
        , c.content
        , c.reg_date
        , c.parent
        , c.depth
        , c.ref
        , c.ref_order
        , c.del_flag
        , m.id AS m_id
        , m.username AS m_username
        , m.name AS m_name
        , m.role AS m_role
        FROM comment c JOIN member m
        WHERE c.post_id=#{postId} AND c.member_id=m.id
        ORDER BY ref, ref_order
    </select>

    <update id="updateComment" parameterType="Comment">
        UPDATE comment
        SET content=#{content}, mod_date=NOW()
        WHERE id=#{id}
    </update>

    <update id="hideComment" parameterType="int">
        UPDATE comment
        SET del_flag=true, mod_date=NOW()
        WHERE id=#{id} AND del_flag=true
    </update>

    <update id="deleteComment" parameterType="int">
        DELETE FROM comment WHERE id=#{id}
    </update>

    <select id="childExists" parameterType="int" resultType="boolean">
        SELECT EXISTS (
        SELECT id
        FROM comment
        WHERE parent=#{id}
        LIMIT 1
        )
    </select>

    <select id="isOnlyMinimumDepth" parameterType="Comment" resultType="boolean">
        SELECT NOT EXISTS (
        SELECT id
        FROM comment
        WHERE ref=#{ref} AND ref_order > #{refOrder} AND (depth = #{depth} OR #{depth} > depth)
        )
    </select>

    <select id="findMaxRefOrder" parameterType="int" resultType="int">
        SELECT MAX(ref_order) FROM comment WHERE ref=#{ref}
    </select>

    <select id="findRefOrderOfChild" parameterType="Comment" resultType="int">
        SELECT ref_order
        FROM comment
        WHERE ref=#{ref} AND ref_order > #{refOrder} AND (depth = #{depth} OR #{depth} > depth)
        ORDER BY ref_order
        LIMIT 1
    </select>

</mapper>
