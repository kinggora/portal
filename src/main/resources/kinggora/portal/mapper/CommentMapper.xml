<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kinggora.portal.mapper.CommentMapper">
    <resultMap id="CommentResponse" type="CommentResponse">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="content" column="content"/>
        <result property="depth" column="depth"/>
        <result property="regDate" column="reg_date"/>
        <result property="modDate" column="mod_date"/>
        <result property="deleted" column="deleted"/>
        <association property="member" javaType="MemberResponse" columnPrefix="m_">
            <result property="username" column="username"/>
            <result property="name" column="name"/>
            <result property="roles" column="roles" typeHandler="MemberRolesTypeHandler"/>
        </association>
    </resultMap>

    <insert id="save" parameterType="Comment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comment(
        post_id
        , member_id
        , content
        , reg_date
        , parent
        , depth
        , ref
        , ref_order
        , deleted
        ) VALUES (
        #{postId}
        , #{memberId}
        , #{content}
        , NOW()
        , #{parent}
        , #{depth}
        , #{ref}
        , #{refOrder}
        , #{deleted}
        )
    </insert>

    <select id="findById" parameterType="int" resultType="Comment">
        SELECT *
        FROM comment
        WHERE id=#{id}
    </select>

    <select id="findByPostId" parameterType="map" resultMap="CommentResponse">
        SELECT
        c.id
        , c.post_id
        , c.content
        , c.reg_date
        , c.mod_date
        , c.depth
        , c.deleted
        , m.username AS m_username
        , m.name AS m_name
        , m.roles AS m_roles
        FROM comment c JOIN member m
        WHERE c.post_id=#{postId} AND c.member_id=m.id
        ORDER BY ref, ref_order
    </select>

    <update id="update" parameterType="Comment">
        UPDATE comment
        SET content=#{content}, mod_date=NOW()
        WHERE id=#{id}
    </update>

    <update id="hideById" parameterType="int">
        UPDATE comment
        SET deleted=true, mod_date=NOW()
        WHERE id=#{id}
    </update>

    <update id="deleteById" parameterType="int">
        DELETE FROM comment WHERE id=#{id}
    </update>

    <select id="getMaxRef" resultType="int">
        SELECT IFNULL(MAX(ref), 0) FROM comment
    </select>

    <update id="refOrderUp" parameterType="map">
        UPDATE comment
        SET ref_order = ref_order + 1
        WHERE ref=#{ref} AND (ref_order > #{refOrder} OR ref_order = #{refOrder})
    </update>


    <select id="hasChild" parameterType="int" resultType="boolean">
        SELECT EXISTS (
        SELECT id
        FROM comment
        WHERE parent=#{id}
        LIMIT 1
        )
    </select>

    <select id="getChildCount" parameterType="int" resultType="int">
        SELECT COUNT(id)
        FROM comment
        WHERE parent=#{id}
    </select>

    <select id="isOnlyMinimumDepth" parameterType="Comment" resultType="boolean">
        SELECT NOT EXISTS (
        SELECT id
        FROM comment
        WHERE ref=#{ref} AND ref_order > #{refOrder} AND (depth = #{depth} OR #{depth} > depth)
        )
    </select>

    <select id="getMaxRefOrder" parameterType="int" resultType="int">
        SELECT MAX(ref_order)
        FROM comment
        WHERE ref=#{ref}
    </select>

    <select id="findRefOrderOfChild" parameterType="Comment" resultType="int">
        SELECT ref_order
        FROM comment
        WHERE ref=#{ref} AND ref_order > #{refOrder} AND (depth = #{depth} OR #{depth} > depth)
        ORDER BY ref_order
        LIMIT 1
    </select>

</mapper>
